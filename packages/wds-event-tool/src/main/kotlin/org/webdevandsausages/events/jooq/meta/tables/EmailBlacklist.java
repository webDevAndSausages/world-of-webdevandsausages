/*
 * This file is generated by jOOQ.
*/
package meta.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import meta.Indexes;
import meta.Keys;
import meta.Public;
import meta.tables.records.EmailBlacklistRecord;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EmailBlacklist extends TableImpl<EmailBlacklistRecord> {

    private static final long serialVersionUID = -2051635810;

    /**
     * The reference instance of <code>public.email_blacklist</code>
     */
    public static final EmailBlacklist EMAIL_BLACKLIST = new EmailBlacklist();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EmailBlacklistRecord> getRecordType() {
        return EmailBlacklistRecord.class;
    }

    /**
     * The column <code>public.email_blacklist.email</code>.
     */
    public final TableField<EmailBlacklistRecord, String> EMAIL = createField("email", org.jooq.impl.SQLDataType.VARCHAR(512).nullable(false), this, "");

    /**
     * Create a <code>public.email_blacklist</code> table reference
     */
    public EmailBlacklist() {
        this(DSL.name("email_blacklist"), null);
    }

    /**
     * Create an aliased <code>public.email_blacklist</code> table reference
     */
    public EmailBlacklist(String alias) {
        this(DSL.name(alias), EMAIL_BLACKLIST);
    }

    /**
     * Create an aliased <code>public.email_blacklist</code> table reference
     */
    public EmailBlacklist(Name alias) {
        this(alias, EMAIL_BLACKLIST);
    }

    private EmailBlacklist(Name alias, Table<EmailBlacklistRecord> aliased) {
        this(alias, aliased, null);
    }

    private EmailBlacklist(Name alias, Table<EmailBlacklistRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.EMAIL_BLACKLIST_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<EmailBlacklistRecord> getPrimaryKey() {
        return Keys.EMAIL_BLACKLIST_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<EmailBlacklistRecord>> getKeys() {
        return Arrays.<UniqueKey<EmailBlacklistRecord>>asList(Keys.EMAIL_BLACKLIST_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public EmailBlacklist as(String alias) {
        return new EmailBlacklist(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public EmailBlacklist as(Name alias) {
        return new EmailBlacklist(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public EmailBlacklist rename(String name) {
        return new EmailBlacklist(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EmailBlacklist rename(Name name) {
        return new EmailBlacklist(name, null);
    }
}
